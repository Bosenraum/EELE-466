-- -------------------------------------------------------------
-- 

-- File Name: C:\EE466\AJR\Lab 3\hdl_coder_Madgwick_normalize\codegen\Madgwick_normalize\hdlsrc\Madgwick_normalize_fixpt.vhd
-- Created: 2018-02-09 13:30:38
-- 
-- Generated by MATLAB 9.3, MATLAB Coder 3.4 and HDL Coder 3.11
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- rx                            ce_out        1
-- ry                            ce_out        1
-- rz                            ce_out        1
-- r3                            ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_normalize_fixpt
-- Source Path: Madgwick_normalize_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_normalize_fixpt_pac.ALL;

ENTITY Madgwick_normalize_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ix                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        iy                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        iz                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        i3                                :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        rx                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        ry                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        rz                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        r3                                :   OUT   std_logic  -- ufix1
        );
END Madgwick_normalize_fixpt;


ARCHITECTURE rtl OF Madgwick_normalize_fixpt IS

  -- Constants
  CONSTANT One                            : unsigned(17 DOWNTO 0) := 
    to_unsigned(16#20000#, 18);  -- ufix18
  CONSTANT C_divbyzero_p                  : unsigned(17 DOWNTO 0) := 
    to_unsigned(16#3FFFF#, 18);  -- ufix18

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ix_signed                        : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL iy_signed                        : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL iz_signed                        : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp                              : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp_1                            : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_2                            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp_3                            : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_4                            : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_5                            : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL tmp_6                            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp_7                            : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL tmp_8                            : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL tmp_9                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL multiplier_in0                   : std_logic;  -- ufix1
  SIGNAL tmp_10                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_11                           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp_12                           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp_13                           : unsigned(13 DOWNTO 0);  -- ufix14_E14
  SIGNAL tmp_14                           : std_logic;
  SIGNAL p42tmp_cast                      : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL rx_1                             : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL tmp_15                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_16                           : std_logic;
  SIGNAL y_y                              : unsigned(6 DOWNTO 0);  -- ufix7_E7
  SIGNAL y_y_1                            : unsigned(6 DOWNTO 0);  -- ufix7_E7
  SIGNAL tmp_18                           : unsigned(6 DOWNTO 0);  -- ufix7_E7
  SIGNAL tmp_19                           : std_logic;
  SIGNAL c_c_7                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL p0c_div_temp                     : unsigned(17 DOWNTO 0);  -- ufix18_En24
  SIGNAL c_c_8                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_20                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_21                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_22                           : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL multiplier_cast                  : signed(14 DOWNTO 0);  -- sfix15_En23
  SIGNAL multiplier_mul_temp              : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL tmp_23                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_24                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL tmp_25                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL rx_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL ry_1                             : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL tmp_26                           : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En23
  SIGNAL multiplier_mul_temp_1            : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL tmp_27                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_28                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL tmp_29                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL ry_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL rz_1                             : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL tmp_30                           : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL multiplier_cast_2                : signed(14 DOWNTO 0);  -- sfix15_En23
  SIGNAL multiplier_mul_temp_2            : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL tmp_31                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_32                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL tmp_33                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL rz_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL r3_1                             : std_logic;  -- ufix1
  SIGNAL tmp_34                           : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL multiplier_in0_1                 : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL tmp_35                           : unsigned(14 DOWNTO 0);  -- ufix15_En23
  SIGNAL tmp_36                           : std_logic;  -- ufix1
  SIGNAL tmp_37                           : std_logic;  -- ufix1

BEGIN
  ix_signed <= signed(ix);

  iy_signed <= signed(iy);

  iz_signed <= signed(iz);

  
-- 'Madgwick_normalize_fixpt:14' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), (sqrt(dotproduct))), 0, 14, 23, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:23' r3 = fi(0, 0, 1, 0, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:22' rz = fi(0, 1, 14, 13, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:21' ry = fi(0, 1, 14, 13, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:20' rx = fi(0, 1, 14, 13, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:19' else
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.3 and Fixed-Point Designer 6.0           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- Normalise given measurement data
  -- 
  -- 'Madgwick_normalize_fixpt:9' fm = get_fimath();
  -- 
  -- 'Madgwick_normalize_fixpt:11' dotproduct = fi(ix * ix + iy * iy + iz * iz + i3 * i3, 0, 14, -14, fm);
  tmp <= ix_signed * ix_signed;

  tmp_1 <= resize(tmp, 29);

  tmp_2 <= iy_signed * iy_signed;

  tmp_3 <= resize(tmp_2, 29);

  tmp_4 <= tmp_1 + tmp_3;

  tmp_5 <= resize(tmp_4, 30);

  tmp_6 <= iz_signed * iz_signed;

  tmp_7 <= resize(tmp_6, 30);

  tmp_8 <= tmp_5 + tmp_7;

  tmp_9 <= resize(tmp_8, 32);

  
  multiplier_in0 <= i3 WHEN i3 = '1' ELSE
      '0';
  tmp_10 <= '0' & multiplier_in0;

  tmp_11 <= signed(resize(tmp_10, 32));

  tmp_12 <= tmp_9 + tmp_11;

  tmp_13 <= unsigned(tmp_12(27 DOWNTO 14));

  -- 'Madgwick_normalize_fixpt:13' if dotproduct ~= fi(0, 0, 1, 0, fm)
  p42tmp_cast <= tmp_13 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  tmp_14 <= '1' WHEN p42tmp_cast /= to_unsigned(16#0000000#, 28) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp37
  rx_1 <= to_signed(16#0000#, 14);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt
  tmp_15 <= to_unsigned(0, 32);

  
  tmp_16 <= '1' WHEN tmp_13 = to_unsigned(16#0000#, 14) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp43
  p1_output : PROCESS (tmp_13)
    VARIABLE yy : unsigned(6 DOWNTO 0);
    VARIABLE tmp17 : unsigned(6 DOWNTO 0);
    VARIABLE y_0 : unsigned(6 DOWNTO 0);
    VARIABLE cast : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp : vector_of_unsigned7(0 TO 6);
    VARIABLE mul_temp : vector_of_unsigned14(0 TO 6);
    VARIABLE cast_0 : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp_0 : vector_of_unsigned7(0 TO 6);
  BEGIN
    yy := to_unsigned(16#00#, 7);

    FOR ii IN 6 DOWNTO 0 LOOP
      cast(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
      sll_temp(ii) := to_unsigned(16#01#, 7) sll to_integer(cast(ii));
      tmp17 := yy OR sll_temp(ii);
      mul_temp(ii) := tmp17 * tmp17;
      IF mul_temp(ii) <= tmp_13 THEN 
        cast_0(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
        sll_temp_0(ii) := to_unsigned(16#01#, 7) sll to_integer(cast_0(ii));
        y_0 := yy OR sll_temp_0(ii);
      ELSE 
        y_0 := yy;
      END IF;
      yy := y_0;
    END LOOP;

    y_y <= yy;
  END PROCESS p1_output;


  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp43
  y_y_1 <= to_unsigned(16#00#, 7);

  
  tmp_18 <= y_y WHEN tmp_16 = '0' ELSE
      y_y_1;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp40
  
  tmp_19 <= '1' WHEN tmp_18 = to_unsigned(16#00#, 7) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp40_falseregionp1
  
  p0c_div_temp <= C_divbyzero_p WHEN tmp_18 = 0 ELSE
      One / tmp_18;
  c_c_7 <= resize(p0c_div_temp, 32);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp40_trueregionp1
  c_c_8 <= unsigned'(X"FFFFFFFF");

  
  tmp_20 <= c_c_7 WHEN tmp_19 = '0' ELSE
      c_c_8;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp37
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp34
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp31
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp28
  
  tmp_21 <= tmp_15 WHEN tmp_14 = '0' ELSE
      tmp_20;

  tmp_22 <= tmp_21(14 DOWNTO 1);

  multiplier_cast <= signed(resize(tmp_22, 15));
  multiplier_mul_temp <= ix_signed * multiplier_cast;
  tmp_23 <= multiplier_mul_temp(27 DOWNTO 0);

  tmp_24 <= tmp_23(23 DOWNTO 10);

  
  tmp_25 <= rx_1 WHEN tmp_14 = '0' ELSE
      tmp_24;

  enb <= clk_enable;

  rx_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      rx_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        rx_tmp <= tmp_25;
      END IF;
    END IF;
  END PROCESS rx_reg_process;


  rx <= std_logic_vector(rx_tmp);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp34
  ry_1 <= to_signed(16#0000#, 14);

  tmp_26 <= tmp_21(14 DOWNTO 1);

  multiplier_cast_1 <= signed(resize(tmp_26, 15));
  multiplier_mul_temp_1 <= iy_signed * multiplier_cast_1;
  tmp_27 <= multiplier_mul_temp_1(27 DOWNTO 0);

  tmp_28 <= tmp_27(23 DOWNTO 10);

  
  tmp_29 <= ry_1 WHEN tmp_14 = '0' ELSE
      tmp_28;

  ry_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ry_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        ry_tmp <= tmp_29;
      END IF;
    END IF;
  END PROCESS ry_reg_process;


  ry <= std_logic_vector(ry_tmp);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp31
  rz_1 <= to_signed(16#0000#, 14);

  tmp_30 <= tmp_21(14 DOWNTO 1);

  multiplier_cast_2 <= signed(resize(tmp_30, 15));
  multiplier_mul_temp_2 <= iz_signed * multiplier_cast_2;
  tmp_31 <= multiplier_mul_temp_2(27 DOWNTO 0);

  tmp_32 <= tmp_31(23 DOWNTO 10);

  
  tmp_33 <= rz_1 WHEN tmp_14 = '0' ELSE
      tmp_32;

  rz_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      rz_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        rz_tmp <= tmp_33;
      END IF;
    END IF;
  END PROCESS rz_reg_process;


  rz <= std_logic_vector(rz_tmp);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp28
  r3_1 <= '0';

  tmp_34 <= tmp_21(14 DOWNTO 1);

  
  multiplier_in0_1 <= tmp_34 WHEN i3 = '1' ELSE
      to_unsigned(16#0000#, 14);
  tmp_35 <= resize(multiplier_in0_1, 15);

  tmp_36 <= '0';

  
  tmp_37 <= r3_1 WHEN tmp_14 = '0' ELSE
      tmp_36;

  r3_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      r3 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        r3 <= tmp_37;
      END IF;
    END IF;
  END PROCESS r3_reg_process;


  ce_out <= clk_enable;

END rtl;

